# app.py
# uvicorn app:app --reload --host 0.0.0.0 --port 8000
#pip install -r requirements.txt

from fastapi import FastAPI, HTTPException, UploadFile, File, Form, Query
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse, Response, RedirectResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel, Field
from passlib.context import CryptContext
from typing import Dict, List, Optional
from datetime import datetime, timedelta, timezone
from os import getenv
import os, secrets, uuid, io, random
import threading, requests  # <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°
from dotenv import load_dotenv  # <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°
import subprocess

# ---------- Servo Control ----------
import pigpio, time
PIN = 12  # ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Header Pin 12 (PWM) ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô BCM18; ‡∏ñ‡πâ‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏ö BCM12 ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
MIN_US = 500
MAX_US = 2500
load_dotenv()
# ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
SERVO_LOCK_ANGLE = 90     # ‡∏°‡∏∏‡∏°‡∏ï‡∏≠‡∏ô "‡∏•‡πá‡∏≠‡∏Å"  (‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á 90¬∞)
SERVO_UNLOCK_ANGLE = 180  # ‡∏°‡∏∏‡∏°‡∏ï‡∏≠‡∏ô "‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å"

def _now_hms():
    return datetime.now(timezone.utc).strftime("%H:%M:%S")

def angle_to_us(angle, min_us=MIN_US, max_us=MAX_US):
    angle = max(0, min(180, float(angle)))
    return int(min_us + (max_us - min_us) * (angle / 180.0))

def _servo_go(angle: float, hold: float = 0.6):
    """‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏ß‡πÑ‡∏õ‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î; ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ pigpiod ‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà"""
    pi = pigpio.pi()
    if not pi.connected:
        raise RuntimeError("pigpio daemon ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà (‡∏•‡∏≠‡∏á sudo systemctl start pigpiod)")
    try:
        us = angle_to_us(angle)
        pi.set_servo_pulsewidth(PIN, us)
        time.sleep(hold)  # ‡∏£‡∏≠‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏á‡πÅ‡∏£‡∏á‡∏ö‡∏¥‡∏î ‡πÉ‡∏´‡πâ‡∏Ñ‡∏á pulse ‡πÑ‡∏ß‡πâ (‡πÑ‡∏°‡πà set 0)
    finally:
        pi.stop()

def servo_for_state(locked: bool, unlock_hold_sec: float = 5.0):
    """
    ‡∏ñ‡πâ‡∏≤ locked=True  -> ‡πÑ‡∏õ‡∏°‡∏∏‡∏°‡∏•‡πá‡∏≠‡∏Å (90¬∞)
    ‡∏ñ‡πâ‡∏≤ locked=False -> ‡πÑ‡∏õ 180¬∞ ‡∏Ñ‡πâ‡∏≤‡∏á 5 ‡∏ß‡∏¥ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö 90¬∞
    ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö non-blocking ‡∏î‡πâ‡∏ß‡∏¢ thread
    """
    def _worker():
        try:
            if locked:
                _servo_go(SERVO_LOCK_ANGLE)  # ‡πÑ‡∏õ 90¬∞
                add_log("servo", "MOVE", f"lock -> {SERVO_LOCK_ANGLE}¬∞")
            else:
                _servo_go(SERVO_UNLOCK_ANGLE)  # ‡πÑ‡∏õ 180¬∞
                add_log("servo", "MOVE", f"unlock -> {SERVO_UNLOCK_ANGLE}¬∞ (hold {unlock_hold_sec}s)")
                time.sleep(max(0.0, unlock_hold_sec))
                _servo_go(SERVO_LOCK_ANGLE)  # ‡∏Å‡∏•‡∏±‡∏ö 90¬∞
                add_log("servo", "MOVE", f"return -> {SERVO_LOCK_ANGLE}¬∞")
        except Exception as e:
            add_log("servo", "ERROR", str(e))

    threading.Thread(target=_worker, daemon=True).start()


RPI_CAMERA_BASE = getenv("RPI_CAMERA_BASE", "http://127.0.0.1:8080")
# ---------- Camera demo (optional) ----------
try:
    from PIL import Image, ImageDraw, ImageFont
    PIL_OK = True
except Exception:
    PIL_OK = False

# ---------- App ----------
app = FastAPI(title="SmartHome API", version="3.0.0")
origins = [
    "http://localhost:3000",
    "http://localhost:5173",
    "http://127.0.0.1:5500",
    "http://192.168.56.1:8000",
    "http://192.168.56.1:8000/web/login.html"
    # ‡πÉ‡∏™‡πà‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô "https://yourdomain.com"
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,   # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ/credentials ‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á False ‡∏Å‡πá‡πÑ‡∏î‡πâ
    allow_methods=["*"],
    allow_headers=["*"],
)

# ---------- Auth (demo) ----------
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

_users_db: Dict[str, str] = {
    "smarthome-user": pwd_context.hash("password123"),
    "admin": pwd_context.hash("admin"),
    "kasidid": pwd_context.hash("mark"),
}

class LoginRequest(BaseModel):
    username: str = Field(min_length=1)
    password: str = Field(min_length=1)

class LoginResponse(BaseModel):
    success: bool
    message: str
    user: Optional[Dict[str, str]] = None

@app.get("/health")
def health():
    return {"status": "ok", "time": datetime.now(timezone.utc).isoformat()}

@app.post("/login", response_model=LoginResponse)
def login(req: LoginRequest):
    u = req.username.strip()
    if u not in _users_db:
        return LoginResponse(success=False, message="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    if not pwd_context.verify(req.password, _users_db[u]):
        return LoginResponse(success=False, message="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    return LoginResponse(success=True, message="‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", user={"username": u})

def _color_from_name(name: str) -> str:
    random.seed(name.lower())
    palette = ["#22d3ee", "#38bdf8", "#60a5fa", "#818cf8", "#a78bfa", "#34d399"]
    return palette[random.randrange(len(palette))]

@app.get("/user/{username}")
def user_profile(username: str):
    name = username.strip()
    return {
        "username": name,
        "display_name": name,
        "initial": (name[:1] or "?").upper(),
        "avatar_color": _color_from_name(name),
    }

# ---------- In-memory state ----------
STATE = {"door_locked": True}
LOGS: List[Dict] = []

# OTP state
OTPS: Dict[str, Dict] = {}
OTP_HISTORY: List[Dict] = []

# Biometric demo
FINGERPRINTS: Dict[str, Dict] = {}
FACES: Dict[str, Dict] = {}

def _now_iso():
    return datetime.now(timezone.utc).isoformat()

def add_log(who: str, action: str, info: str = ""):
    LOGS.append({"ts": _now_iso(), "who": who, "action": action, "info": info})
    if len(LOGS) > 500:
        del LOGS[:len(LOGS)-500]
TELEGRAM_BOT_TOKEN = getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = getenv("TELEGRAM_CHAT_ID")

def _tg_enabled() -> bool:
    return bool(TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID)

def _send_telegram_message(text: str):
    """
    ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Telegram ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å (background thread)
    ‡πÉ‡∏ä‡πâ HTML ‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô <b>‡∏´‡∏ô‡∏≤</b>
    """
    if not _tg_enabled():
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }
    def _post():
        try:
            requests.post(url, json=payload, timeout=6)
        except Exception:
            pass
    threading.Thread(target=_post, daemon=True).start()

# ---------- Door Lock ----------
class LockRequest(BaseModel):
    action: str   # lock | unlock | (‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏û‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢)
    who: Optional[str] = None

def _normalize_action(s: str) -> str:
    """ map ‡∏Ñ‡∏≥‡∏û‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ lock / unlock """
    s = (s or "").strip().lower()
    unlock_words = {"unlock","open","‡πÄ‡∏õ‡∏¥‡∏î","open_door","1","true","on"}
    lock_words   = {"lock","close","‡∏õ‡∏¥‡∏î","close_door","0","false","off"}

    if s in unlock_words:
        return "unlock"
    if s in lock_words:
        return "lock"
    return s  # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡πà‡∏á‡∏ï‡∏£‡∏á lock/unlock ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß

@app.post("/lock")
def lock_control(req: LockRequest):
    action = _normalize_action(req.action)
    if action not in ("lock", "unlock"):
        raise HTTPException(400, detail="action ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô lock/unlock ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏û‡πâ‡∏≠‡∏á open/close/‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î/1/0")

    STATE["door_locked"] = (action == "lock")
    add_log(req.who or "system", action.upper(), "‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å API")

    # ‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏ß‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà (non-blocking)
    servo_for_state(STATE["door_locked"])

    if action == "unlock":
        _send_telegram_message(
            f"üîì <b>Door Unlocked</b>\nMethod: API\nBy: {req.who or 'system'}\nTime: {_now_hms()}"# type: ignore
        )
    else:
        _send_telegram_message(
            f"üîê <b>Door Locked</b>\nBy: {req.who or 'system'}\nTime: {_now_hms()}"# type: ignore
        )

    return {"ok": True, "locked": STATE["door_locked"]}

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á alias ‡πÉ‡∏´‡πâ Dashboard ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏á‡πà‡∏≤‡∏¢ ‡πÜ
@app.post("/door/open")
def door_open(who: Optional[str] = None):
    STATE["door_locked"] = False
    add_log(who or "system", "UNLOCK", "alias /door/open")
    servo_for_state(False)
    _send_telegram_message(f"üîì <b>Door Unlocked</b>\nMethod: /door/open\nTime: {_now_hms()}")# type: ignore
    return {"ok": True, "locked": STATE["door_locked"]}

@app.post("/door/close")
def door_close(who: Optional[str] = None):
    STATE["door_locked"] = True
    add_log(who or "system", "LOCK", "alias /door/close")
    servo_for_state(True)
    _send_telegram_message(f"üîê <b>Door Locked</b>\nMethod: /door/close\nTime: {_now_hms()}")# type: ignore
    return {"ok": True, "locked": STATE["door_locked"]}



# ---------- OTP ----------
class OTPCreateRequest(BaseModel):
    minutes: int = Field(ge=1, le=1440)
    uses: int = Field(ge=1, le=100)
    who: Optional[str] = None
    comment: Optional[str] = None

class OTPUseRequest(BaseModel):
    code: str

def _push_history(item: Dict):
    OTP_HISTORY.append(item.copy())
    if len(OTP_HISTORY) > 1000:
        del OTP_HISTORY[:len(OTP_HISTORY)-1000]

def _cleanup_otps():
    now = datetime.now(timezone.utc)
    for code in list(OTPS.keys()):
        o = OTPS[code]
        expired = datetime.fromisoformat(o["expires_at"]) <= now
        no_remaining = o["remaining"] <= 0
        if expired or no_remaining:
            o["status"] = "expired"
            _push_history(o)
            del OTPS[code]
def _consume_otp(code: str):
    """
    ‡πÉ‡∏ä‡πâ OTP 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á:
    - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏Ñ‡∏∑‡∏ô (True, remaining_after, item_snapshot)
    - ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏Ñ‡∏∑‡∏ô (False, reason, None)
      reason: "not_found_or_expired" | "no_remaining"
    """
    _cleanup_otps()
    o = OTPS.get(code)
    now = datetime.now(timezone.utc)

    if not o:
        return (False, "not_found_or_expired", None)

    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    if datetime.fromisoformat(o["expires_at"]) <= now:
        o["status"] = "expired"
        _push_history(o)
        del OTPS[code]
        return (False, "not_found_or_expired", None)

    if o["remaining"] <= 0:
        o["status"] = "expired"
        _push_history(o)
        del OTPS[code]
        return (False, "no_remaining", None)

    # ‡πÉ‡∏ä‡πâ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    o["remaining"] -= 1
    _push_history(o)  # snapshot ‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ

    # ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏î ‚Üí ‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ & ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ history ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö‡∏à‡∏≤‡∏Å active
    if o["remaining"] <= 0:
        o["status"] = "expired"
        _push_history(o)
        del OTPS[code]

    return (True, o.get("remaining", 0), o)

@app.get("/otp/active")
def otp_active():
    _cleanup_otps()
    items = sorted(OTPS.values(), key=lambda x: x["expires_at"])
    return {"items": items}

@app.get("/otp/history")
def otp_history(limit: int = 200):
    _cleanup_otps()
    expired_items = [it for it in OTP_HISTORY if it.get("status") == "expired"]
    items = expired_items[::-1][:max(1, min(1000, limit))]
    return {"items": items}

@app.post("/otp")
def otp_create(req: OTPCreateRequest):
    _cleanup_otps()
    code = f"{secrets.randbelow(10**6):06d}"
    now = datetime.now(timezone.utc)
    item = {
        "code": code,
        "created_at": now.isoformat(),
        "expires_at": (now + timedelta(minutes=req.minutes)).isoformat(),
        "uses": req.uses,
        "remaining": req.uses,
        "comment": (req.comment or None),
        "status": "active",
    }
    OTPS[code] = item
    add_log(req.who or "system", "OTP_CREATE", f"{code} ({req.uses} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á / {req.minutes} ‡∏ô‡∏≤‡∏ó‡∏µ)")
    _push_history(item)
    return item

@app.delete("/otp/{code}")
def otp_revoke(code: str, who: Optional[str] = None):
    _cleanup_otps()
    o = OTPS.pop(code, None)
    if not o:
        raise HTTPException(404, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö OTP ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    o["status"] = "revoked"
    _push_history(o)
    add_log(who or "system", "OTP_REVOKE", f"‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å {code}")
    return {"ok": True, "revoked": code}

@app.post("/otp/use")
def otp_use(req: OTPUseRequest):
    _cleanup_otps()
    o = OTPS.get(req.code)
    if not o:
        return {"valid": False, "reason": "not_found_or_expired"}
    if o["remaining"] <= 0:
        return {"valid": False, "reason": "no_remaining"}
    o["remaining"] -= 1
    _push_history(o)
    if o["remaining"] <= 0:
        o["status"] = "expired"
        _push_history(o)
        del OTPS[req.code]
    return {"valid": True, "remaining": o.get("remaining", 0)}

@app.delete("/otp/history/clear")
def otp_history_clear():
    n = len(OTP_HISTORY)
    OTP_HISTORY.clear()
    return {"ok": True, "cleared": n}

# ---------- Logs ----------
@app.get("/logs")
def get_logs():
    return {"items": LOGS[::-1]}

# ---------- Fingerprints ----------
class FPEnrollRequest(BaseModel):
    user: str
    finger: str

@app.get("/fingerprints")
def fp_list():
    return {"items": list(FINGERPRINTS.values())}

@app.post("/fingerprints/enroll")
def fp_enroll(req: FPEnrollRequest):
    fid = str(uuid.uuid4())
    item = {"id": fid, "user": req.user.strip(), "finger": req.finger.strip()}
    FINGERPRINTS[fid] = item
    add_log(req.user, "FP_ENROLL", req.finger)
    return item

@app.delete("/fingerprints/{fid}")
def fp_delete(fid: str):
    item = FINGERPRINTS.pop(fid, None)
    if not item:
        raise HTTPException(404, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠")
    add_log(item["user"], "FP_DELETE", item["finger"])
    return {"ok": True, "deleted": fid}

# ---------- Faces ----------
@app.get("/faces")
def face_list():
    return {"items": list(FACES.values())}

@app.post("/faces/enroll")
async def face_enroll(user: str = Form(...), file: UploadFile = File(None)):
    fid = str(uuid.uuid4())
    file_name = None
    if file is not None:
        await file.read()
        file_name = file.filename
    item = {"id": fid, "user": user.strip(), "file_name": file_name}
    FACES[fid] = item
    add_log(user, "FACE_ENROLL", file_name or "-")
    return item

@app.delete("/faces/{fid}")
def face_delete(fid: str):
    item = FACES.pop(fid, None)
    if not item:
        raise HTTPException(404, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤")
    add_log(item["user"], "FACE_DELETE", item.get("file_name") or "-")
    return {"ok": True, "deleted": fid}

# ---------- UI state ----------
@app.get("/ui/state")
def ui_state():
    _cleanup_otps()
    return {
        "door": {"locked": STATE["door_locked"]},
        "otp": {"items": list(OTPS.values())},
        "otp_history": OTP_HISTORY[::-1][:200],
        "logs": LOGS[::-1][:100],
        "fingerprints": list(FINGERPRINTS.values()),
        "faces": list(FACES.values()),
    }

# ---------- PIN Unlock (with default + change) ----------
class PinVerifyRequest(BaseModel):
    pin: str = Field(min_length=6, max_length=6)

class PinSetRequest(BaseModel):
    current_pin: Optional[str] = None   # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á default ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á
    new_pin: str = Field(min_length=6, max_length=6)

DEFAULT_PIN = getenv("SMARTLOCK_DEFAULT_PIN", "123456")  # ‡∏ï‡∏±‡πâ‡∏á‡∏ú‡πà‡∏≤‡∏ô ENV ‡πÑ‡∏î‡πâ
PIN_IS_DEFAULT = True
PIN_HASH = pwd_context.hash(DEFAULT_PIN)

def _verify_pin(raw_pin: str) -> bool:
    p = (raw_pin or "").strip()
    if len(p) != 6 or not p.isdigit():
        return False
    return pwd_context.verify(p, PIN_HASH)

@app.get("/pin/info")
def pin_info():
    return {"success": True, "is_default": PIN_IS_DEFAULT, "length": 6}

@app.post("/pin/verify")
def pin_verify(req: PinVerifyRequest):
    if _verify_pin(req.pin):
        add_log("pin", "PIN_VERIFY_OK", "verify only")
        return {"success": True, "message": "PIN OK"}
    add_log("pin", "PIN_VERIFY_FAIL", "invalid pin")
    return {"success": False, "message": "PIN ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}

@app.post("/pin/unlock")
def pin_unlock(req: PinVerifyRequest):
    # 1) ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢ PIN
    if _verify_pin(req.pin):
        STATE["door_locked"] = False
        add_log("pin", "UNLOCK", "‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏à‡∏≤‡∏Å PIN")
        _send_telegram_message(
            f"üîì <b>Door Unlocked</b>\nMethod: PIN\nTime: {_now_iso()}"
        )
        # üëâ ‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏ß
        servo_for_state(STATE["door_locked"])
        return {"success": True, "method": "pin", "message": "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß", "locked": STATE["door_locked"]}

    # 2) ‡∏•‡∏≠‡∏á‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢ OTP
    ok, info, item = _consume_otp(req.pin)
    if ok:
        STATE["door_locked"] = False
        remaining = info
        add_log("otp", "UNLOCK", f"‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏à‡∏≤‡∏Å OTP {req.pin} (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining})")
        _send_telegram_message(
            f"üîì <b>Door Unlocked</b>\nMethod: OTP\nRemaining: {remaining}\nTime: {_now_iso()}"
        )
        # üëâ ‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏ß
        servo_for_state(STATE["door_locked"])
        return {
            "success": True,
            "method": "otp",
            "message": f"‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢ OTP (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)",
            "remaining": remaining,
            "locked": STATE["door_locked"],
        }
    else:
        reason = info
        if reason == "no_remaining":
            msg = "OTP ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß"
        else:
            msg = "OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö"
        add_log("otp", "UNLOCK_FAIL", f"{req.pin}: {msg}")
        _send_telegram_message(
            f"‚ùå <b>Unlock Attempt Failed</b>\nReason: {msg}\nTime: {_now_iso()}"
        )
        return {"success": False, "message": msg}


@app.post("/pin/set")
def pin_set(req: PinSetRequest):
    global PIN_HASH, PIN_IS_DEFAULT
    newp = (req.new_pin or "").strip()
    if not newp.isdigit() or len(newp) != 6:
        raise HTTPException(400, detail="new_pin ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 6 ‡∏´‡∏•‡∏±‡∏Å")

    if PIN_IS_DEFAULT:
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ current_pin
        PIN_HASH = pwd_context.hash(newp)
        PIN_IS_DEFAULT = False
        add_log("pin", "PIN_SET", "set from default")
        return {"success": True, "message": "‡∏ï‡∏±‡πâ‡∏á PIN ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)"}
    else:
        cur = (req.current_pin or "").strip()
        if not _verify_pin(cur):
            raise HTTPException(401, detail="current_pin ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        PIN_HASH = pwd_context.hash(newp)
        PIN_IS_DEFAULT = False
        add_log("pin", "PIN_SET", "changed")
        return {"success": True, "message": "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô PIN ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}


# ---------- Camera demo ----------
def _make_frame_bytes(text: str = "SmartHome Camera") -> bytes:
    if not PIL_OK:
        # 1x1 black PNG (fallback)
        return (b"\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01"
                b"\x08\x02\x00\x00\x00\x90wS\xde\x00\x00\x00\x0bIDATx\x9cc``\x00\x00"
                b"\x00\x04\x00\x01\x0b\xe7\x02b\x00\x00\x00\x00IEND\xaeB`\x82")
    img = Image.new("RGB", (640, 360), (10, 14, 26))
    d = ImageDraw.Draw(img)
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    caption = f"{text}\n{now}"
    try:
        font = ImageFont.load_default()
    except Exception:
        font = None
    d.rectangle([(16,16),(624,120)], outline=(180,180,255))
    d.text((24,24), caption, fill=(235,240,255), font=font, spacing=4)
    buf = io.BytesIO()
    img.save(buf, format="JPEG", quality=80)
    return buf.getvalue()

@app.get("/camera/snapshot")
def camera_snapshot():
    try:
        r = requests.get(f"{RPI_CAMERA_BASE}/?action=snapshot", timeout=5)
        r.raise_for_status()
        return Response(content=r.content, media_type="image/jpeg")
    except Exception as e:
        raise HTTPException(502, detail=f"Snapshot upstream error: {e}")

@app.get("/camera/mjpeg")
def camera_mjpeg():
    try:
        upstream = requests.get(f"{RPI_CAMERA_BASE}/?action=stream", stream=True, timeout=10)
        upstream.raise_for_status()
        ctype = upstream.headers.get("Content-Type", "multipart/x-mixed-replace; boundary=frame")
        return StreamingResponse(upstream.iter_content(chunk_size=1024), media_type=ctype)
    except Exception as e:
        raise HTTPException(502, detail=f"MJPEG upstream error: {e}")

# ---------- Static Web ----------
# ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'web' ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö app.py
if not os.path.isdir("web"):
    os.makedirs("web", exist_ok=True)

app.mount("/web", StaticFiles(directory="web", html=True), name="web")

@app.get("/")
def root():
    # ‡πÑ‡∏õ‡∏ó‡∏µ‡πà /web/ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ index.html
    return RedirectResponse(url="/web/")

@app.get("/favicon.ico")
def favicon():
    path = os.path.join("web", "favicon.ico")
    if os.path.exists(path):
        return FileResponse(path)
    return Response(status_code=204)

#8888888888#

def angle_to_us(angle, min_us=MIN_US, max_us=MAX_US):
    angle = max(0, min(180, float(angle)))
    return int(min_us + (max_us - min_us) * (angle / 180.0))

def servo_demo():
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Servo:
    ‡πÄ‡∏£‡∏¥‡πà‡∏° 90¬∞ -> ‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏õ 180¬∞ -> ‡∏Ñ‡πâ‡∏≤‡∏á 5 ‡∏ß‡∏¥ -> ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ 90¬∞
    """
    pi = pigpio.pi()
    if not pi.connected:
        raise RuntimeError("pigpio daemon ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà (‡∏•‡∏≠‡∏á sudo systemctl start pigpiod)")

    try:
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 90¬∞
        mid_angle = 180
        us = angle_to_us(mid_angle)
        pi.set_servo_pulsewidth(PIN, us)
        print(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà {mid_angle}¬∞ -> {us} ¬µs")
        time.sleep(1.0)

        # ‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏õ 180¬∞
        end_angle = 90
        us = angle_to_us(end_angle)
        pi.set_servo_pulsewidth(PIN, us)
        print(f"‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏õ {end_angle}¬∞ -> {us} ¬µs")
        time.sleep(5.0)

        # ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà 90¬∞
        us = angle_to_us(mid_angle)
        pi.set_servo_pulsewidth(PIN, us)
        print(f"‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà {mid_angle}¬∞ -> {us} ¬µs")
        time.sleep(1.0)

    finally:
        pi.set_servo_pulsewidth(PIN, 0)
        pi.stop()

@app.post("/servo/test")
def servo_test():
    """
    ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å endpoint ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Servo ‡∏´‡∏°‡∏∏‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    """
    try:
        servo_demo()
        return {"ok": True, "message": "servo moved"}
    except Exception as e:
        raise HTTPException(500, detail=str(e))